{-# OPTIONS --guarded #-}

import Prelude as P hiding (_<_ ; Tactic-bishop-finite ; ord‚Üíis-discrete)
open P
open import Data.Empty
open import Data.Bool
open import Data.Dec
open import Data.Nat
open import Correspondences.Wellfounded

open import Later
open import Clocked.Partial
open import Clocked.Partial.Converges
open import Clocked.Partial.All

module Examples.Tarski
  {‚Ñì ‚Ñì‚Ä≤ : Level}
  {A : ùí∞ ‚Ñì}
  ‚¶É dA : is-discrete A ‚¶Ñ
  (bot : A)
  (_‚â§_ : Corr¬≤ (A , A) ‚Ñì‚Ä≤)
  (‚â§-bot : ‚àÄ x ‚Üí bot ‚â§ x)
  (wf-> : Wf Œª x y ‚Üí (x ‚â† y) √ó (y ‚â§ x))
  {F : A ‚Üí A}
  (Fmono : ‚àÄ x y ‚Üí x ‚â§ y ‚Üí F x ‚â§ F y)
  where

private variable
  Œ∫ : Cl

_>_ : Corr¬≤ (A , A) (‚Ñì ‚äî ‚Ñì‚Ä≤)
x > y = (x ‚â† y) √ó (y ‚â§ x)

-- well-founded

iter·µó·µÉ : (x : A) ‚Üí x ‚â§ F x ‚Üí Acc _>_ x ‚Üí A
iter·µó·µÉ x pre (acc rec) with x ‚âü F x
... | yes e = x
... | no ne = iter·µó·µÉ (F x) (Fmono x (F x) pre) (rec (F x) (ne ‚àò sym , pre))

lfp : A
lfp = iter·µó·µÉ bot (‚â§-bot (F bot)) (wf-> bot)

lfp-eq : F lfp Ôºù lfp
lfp-eq =
  to-induction _>_ wf->
    (Œª a ‚Üí (l : a ‚â§ F a) ‚Üí (ac : Acc _>_ a) ‚Üí F (iter·µó·µÉ a l ac) Ôºù iter·µó·µÉ a l ac)
    go bot (‚â§-bot (F bot)) (wf-> bot)
  where
  go : (a : A)
     ‚Üí ((b : A) ‚Üí b > a ‚Üí (l : b ‚â§ F b) ‚Üí (ac : Acc _>_ b) ‚Üí F (iter·µó·µÉ b l ac) Ôºù iter·µó·µÉ b l ac)
     ‚Üí (l : a ‚â§ F a) ‚Üí (ac : Acc _>_ a)
     ‚Üí F (iter·µó·µÉ a l ac) Ôºù iter·µó·µÉ a l ac
  go a ih l (acc rec) with a ‚âü F a
  ... | yes e = sym e
  ... | no ne = ih (F a) (ne ‚àò sym , l) (Fmono a (F a) l) (rec (F a) (ne ‚àò sym , l))

lfp-least : ‚àÄ z ‚Üí F z Ôºù z ‚Üí lfp ‚â§ z
lfp-least z fz =
  to-induction _>_ wf->
    (Œª a ‚Üí (l : a ‚â§ F a) ‚Üí (ac : Acc _>_ a) ‚Üí a ‚â§ z ‚Üí iter·µó·µÉ a l ac ‚â§ z)
    go bot (‚â§-bot (F bot)) (wf-> bot) (‚â§-bot z)
  where
  go : (a : A)
     ‚Üí ((b : A) ‚Üí b > a ‚Üí (l : b ‚â§ F b) ‚Üí (ac : Acc _>_ b) ‚Üí b ‚â§ z ‚Üí iter·µó·µÉ b l ac ‚â§ z)
     ‚Üí (l : a ‚â§ F a) ‚Üí (ac : Acc _>_ a) ‚Üí a ‚â§ z ‚Üí iter·µó·µÉ a l ac ‚â§ z
  go a ih l (acc rec) la with a ‚âü F a
  ... | yes e = la
  ... | no ne = ih (F a) (ne ‚àò sym , l) (Fmono a (F a) l) (rec (F a) (ne ‚àò sym , l)) (subst (F a ‚â§_) fz (Fmono a z la))

-- coinductive

iter·µè-body : ‚ñπ Œ∫ (A ‚Üí gPart Œ∫ A) ‚Üí A ‚Üí gPart Œ∫ A
iter·µè-body i‚ñπ x = if ‚åä x ‚âü F x ‚åã then now x else later (i‚ñπ ‚äõ next (F x))

iter·µè : A ‚Üí gPart Œ∫ A
iter·µè = fix iter·µè-body

iter·∂ú : A ‚Üí Part A
iter·∂ú x Œ∫ = iter·µè x

lfp·µè : gPart Œ∫ A
lfp·µè = iter·µè bot

lfp·∂ú : Part A
lfp·∂ú Œ∫ = lfp·µè

-- convergence and properties

iter·∂ú-acc‚áì : (x : A) ‚Üí x ‚â§ F x ‚Üí Acc _>_ x ‚Üí iter·∂ú x ‚áì
iter·∂ú-acc‚áì x pre (acc rec) with x ‚âü F x
... | yes e = x , ‚à£ 0 , refl ‚à£‚ÇÅ
... | no ne =
  second
    (map
       Œª where
          (m , e) ‚Üí
            suc m , fun-ext Œª Œ∫ ‚Üí
                       ap (Œª q ‚Üí later (q ‚äõ next (F x))) (pfix iter·µè-body)
                     ‚àô ap Œ¥·µè (happly e Œ∫))
    (iter·∂ú-acc‚áì (F x) (Fmono x (F x) pre) (rec (F x) (ne ‚àò sym , pre)))

iter·∂ú‚áì : (x : A) ‚Üí x ‚â§ F x ‚Üí iter·∂ú x ‚áì
iter·∂ú‚áì x pre = iter·∂ú-acc‚áì x pre (wf-> x)

lfp·∂ú‚áì : lfp·∂ú ‚áì
lfp·∂ú‚áì = iter·∂ú‚áì bot (‚â§-bot (F bot))

lfp·∂ú-eq : All·µñ (Œª q ‚Üí F q Ôºù q) lfp·∂ú
lfp·∂ú-eq Œ∫ =
  to-induction _>_ wf->
    (Œª a ‚Üí a ‚â§ F a ‚Üí Acc _>_ a ‚Üí gAll·µñ Œ∫ (Œª q ‚Üí F q Ôºù q) (iter·µè a))
    go bot (‚â§-bot (F bot)) (wf-> bot)
  where
  go : (x : A)
     ‚Üí ((y : A) ‚Üí y > x ‚Üí y ‚â§ F y ‚Üí Acc _>_ y ‚Üí gAll·µñ Œ∫ (Œª q ‚Üí F q Ôºù q) (iter·µè y))
     ‚Üí x ‚â§ F x ‚Üí Acc _>_ x ‚Üí gAll·µñ Œ∫ (Œª q ‚Üí F q Ôºù q) (iter·µè x)
  go x ih pre (acc rec) with x ‚âü F x
  ... | yes e = gAll-now (sym e)
  ... | no ne =
    gAll-later Œª Œ± ‚Üí
      transport (Œª i ‚Üí gAll·µñ Œ∫ (Œª q ‚Üí F q Ôºù q) (pfix iter·µè-body (~ i) Œ± (F x))) $
      ih (F x) (ne ‚àò sym , pre) (Fmono x (F x) pre) (rec (F x) (ne ‚àò sym , pre))

lfp·∂ú-least : ‚àÄ z ‚Üí F z Ôºù z ‚Üí All·µñ (_‚â§ z) lfp·∂ú
lfp·∂ú-least z fz Œ∫ =
  to-induction _>_ wf->
    (Œª a ‚Üí a ‚â§ F a ‚Üí Acc _>_ a ‚Üí a ‚â§ z ‚Üí gAll·µñ Œ∫ (_‚â§ z) (iter·µè a))
    go bot (‚â§-bot (F bot)) (wf-> bot) (‚â§-bot z)
  where
  go : (a : A)
     ‚Üí ((b : A) ‚Üí b > a ‚Üí b ‚â§ F b ‚Üí Acc _>_ b ‚Üí b ‚â§ z ‚Üí gAll·µñ Œ∫ (_‚â§ z) (iter·µè b))
     ‚Üí a ‚â§ F a ‚Üí Acc _>_ a ‚Üí a ‚â§ z ‚Üí gAll·µñ Œ∫ (_‚â§ z) (iter·µè a)
  go a ih l (acc rec) la with a ‚âü F a
  ... | yes e = gAll-now la
  ... | no ne =
    gAll-later Œª Œ± ‚Üí
      transport (Œª i ‚Üí gAll·µñ Œ∫ (_‚â§ z) (pfix iter·µè-body (~ i) Œ± (F a))) $
      ih (F a) (ne ‚àò sym , l) (Fmono a (F a) l) (rec (F a) (ne ‚àò sym , l)) (subst (F a ‚â§_) fz (Fmono a z la))
